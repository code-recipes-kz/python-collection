"""
Функция is_pangram принимает один аргумент - строку sentence, которая представляет собой предложение, которое нужно проверить на панграмму.

Строка sentence преобразуется в нижний регистр с помощью метода lower(). Это делается для того, чтобы не учитывать регистр букв при проверке на панграмму.

Создается множество alphabet, содержащее все буквы английского алфавита от 'a' до 'z'. Множество используется для хранения букв, которые еще не встретились в предложении.

Из строки sentence с помощью генератора списков и метода isalpha() удаляются все символы, кроме букв. Это делается с помощью функции join(), которая объединяет все элементы списка в строку. Таким образом, sentence превращается в строку, содержащую только буквы алфавита, и сохраняется в переменную sentence.

Затем проходим по каждому символу в строке sentence с помощью цикла for. Для каждого символа выполняются следующие действия:

Если символ содержится в множестве alphabet (то есть это буква английского алфавита), то он удаляется из множества с помощью метода discard(). Это делается для того, чтобы отметить, что буква уже встретилась в предложении.
После прохода по всем символам в sentence, проверяем, стало ли множество alphabet пустым с помощью функции len(). Если множество пусто, это означает, что все буквы английского алфавита встретились в предложении хотя бы один раз, и предложение является панграммой. В таком случае, функция возвращает True.

Если множество alphabet осталось непустым, это означает, что не все буквы английского алфавита встретились в предложении, и предложение не является панграммой. В таком случае, функция возвращает False.
"""

# tags: Strings, Data Structures, Fundamentals
# kyu: 6

def is_pangram(sentence):
    # Преобразуем предложение в нижний регистр
    sentence = sentence.lower()

    # Создаем множество для хранения букв алфавита
    alphabet = set("abcdefghijklmnopqrstuvwxyz")

    # Удаляем все символы, кроме букв, из предложения
    sentence = ''.join(char for char in sentence if char.isalpha())

    # Проходим по каждому символу в предложении
    for char in sentence:
        # Если символ входит в множество букв алфавита,
        # удаляем его из множества
        if char in alphabet:
            alphabet.discard(char)

    # Если множество букв алфавита стало пустым,
    # значит все буквы алфавита встретились в предложении
    # хотя бы один раз, и предложение является панграммой
    return len(alphabet) == 0