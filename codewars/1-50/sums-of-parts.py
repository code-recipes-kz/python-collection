"""
Создается копия входного списка ls и сохраняется в переменную cop. Это делается для того, чтобы исходный список не изменялся в процессе выполнения функции.

Вычисляется общая сумма всех чисел в списке ls с помощью функции sum(ls), и результат сохраняется в переменную top.

Создается переменная sums и инициализируется значением 0. Она будет использоваться для отслеживания текущей суммы чисел в оставшейся части списка ls.

Создается пустой список parts, который будет содержать суммы частей списка ls.

Итерируется по индексам списка ls с помощью цикла for и переменной i в диапазоне от 0 до длины списка ls.

Внутри цикла проверяется длина списка parts. Если она равна 0, то добавляется сумма всех чисел в списке ls в переменную parts, так как это первая часть списка.

Если длина списка parts больше 0, то вычисляется разница между общей суммой всех чисел в списке ls и текущей суммой чисел в оставшейся части списка ls (которая хранится в переменной sums), и результат добавляется в список parts.

После этого, текущая сумма чисел в оставшейся части списка ls (которая хранится в переменной sums) увеличивается на значение элемента списка cop по текущему индексу i.

После окончания цикла for, в список parts добавляется 0, так как это последняя часть списка ls, состоящая только из нулей.

В конце функции возвращается список parts, содержащий суммы частей списка ls.
"""

# tags: Fundamentals, Performance, Algorithms
# kyu: 6

def parts_sums(ls):
    """
    Аргументы:
    ls (list): Список чисел.

    Возвращает:
    list: Список сумм частей списка `ls`.
    """

    cop = list(ls)  # Создаем копию входного списка
    top = sum(ls)  # Вычисляем общую сумму всех чисел в списке
    sums = 0  # Инициализируем переменную для отслеживания текущей суммы чисел
    parts = []  # Инициализируем список для хранения сумм частей

    # Итерируем по индексам списка
    for i in range(len(ls)):
        if len(parts) == 0:
            parts.append(top)  # Если это первая часть списка, добавляем общую сумму всех чисел
        else:
            parts.append(top - sums)  # Вычисляем сумму чисел в оставшейся части списка и добавляем в список частей
        sums += cop[i]  # Увеличиваем текущую сумму чисел на значение элемента списка по текущему индексу

    parts.append(0)  # Добавляем 0 в конец списка, так как это последняя часть списка

    return parts  # Возвращаем список сумм частей списка `ls`