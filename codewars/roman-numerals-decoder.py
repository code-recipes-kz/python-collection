"""
Функция использует словарь roman_dict, в котором хранятся соответствия между римскими символами и их числовыми значениями. Затем она проходит по римскому числу справа налево, суммируя или вычитая соответствующие значения в зависимости от порядка символов и сохраняя предыдущее значение для сравнения с последующими символами. В результате получается числовое значение в десятичной системе.

Создаем словарь roman_dict, где ключи - римские символы, а значения - их числовые эквиваленты, в соответствии с таблицей в техническом задании.

Инициализируем переменную decimal с начальным значением 0, которая будет хранить итоговое десятичное значение римского числа.

Инициализируем переменную prev_val с начальным значением 0, которая будет хранить значение предыдущего символа, чтобы сравнивать с последующими символами и определить, нужно ли суммировать или вычитать значение.

Проходим по символам римского числа roman, начиная с последнего символа (с правого края) до первого символа (до левого края), используя функцию reversed().

Для каждого символа char в цикле:

Получаем его числовое значение из словаря roman_dict с помощью roman_dict[char] и сохраняем в переменную val.

Сравниваем val с prev_val (значением предыдущего символа). Если val меньше prev_val, это означает, что перед нами комбинированный римский символ, требующий вычитания (например, IV или CM). В этом случае вычитаем val из decimal.

Если val больше или равно prev_val, это означает, что перед нами простой римский символ или комбинированный римский символ, требующий сложения (например, VI или XC). В этом случае прибавляем val к decimal.

Обновляем значение prev_val на текущее значение val для сравнения с последующими символами.

После прохода по всем символам римского числа, возвращаем итоговое значение decimal как результат.
"""

# tags: Algorithms
# kyu: 6

def roman_to_decimal(roman):
    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    decimal = 0
    prev_val = 0
    for char in reversed(roman):
        val = roman_dict[char]
        if val < prev_val:
            decimal -= val
        else:
            decimal += val
        prev_val = val
    return decimal
