"""
Создается словарь ROMAN_NUMERALS, который содержит соответствия между цифрами и символами римских чисел, включая особые случаи, такие как 4, 9, 40, 90, 400 и 900, которые требуют особого представления в римской системе счисления.
Происходит проверка на валидность входного числа number, чтобы удостовериться, что оно находится в допустимом диапазоне от 1 до 3999. Если число не входит в этот диапазон, вызывается исключение ValueError с соответствующим сообщением об ошибке.
Инициализируется пустая строка result, которая будет содержать римское представление числа.
Происходит перебор соответствий между числами и символами римских чисел из словаря ROMAN_NUMERALS в обратном порядке, начиная с наибольшего значения.
Для каждого соответствия значение-символ, пока значение value меньше или равно входному числу number, символ symbol добавляется к строке result, и значение value вычитается из number. Это повторяется до тех пор, пока значение value не станет больше number.
После завершения перебора и формирования строки result, она возвращается в качестве результата функции.
В примере использования функции, выводится римское представление чисел 1000, 1990, 2008 и 1666, согласно заданию.
"""

# tags: Algorithms
# kyu: 6

def solution(number):
    """
    Функция, принимающая положительное целое число от 1 до 3999 и возвращающая его представление в виде римского числа.
    """
    # Соответствия между цифрами и символами римских чисел
    ROMAN_NUMERALS = {
        1: 'I',
        4: 'IV',
        5: 'V',
        9: 'IX',
        10: 'X',
        40: 'XL',
        50: 'L',
        90: 'XC',
        100: 'C',
        400: 'CD',
        500: 'D',
        900: 'CM',
        1000: 'M'
    }
    # Проверка на валидность входного числа
    if number < 1 or number > 3999:
        raise ValueError("Число должно быть в диапазоне от 1 до 3999")
    # Инициализация переменных
    result = ""
    # Перебор соответствий между числами и символами римских чисел в обратном порядке
    for value, symbol in sorted(ROMAN_NUMERALS.items(), reverse=True):
        while number >= value:
            result += symbol
            number -= value
    return result