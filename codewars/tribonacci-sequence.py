"""
Функция tribonacci принимает два аргумента: список signature из 3-х чисел, который представляет начальную сигнатуру Tribonacci последовательности, и целое число n, которое указывает, сколько элементов нужно сгенерировать.

Сначала функция проверяет, равно ли n нулю. Если это так, то возвращается пустой список [], так как в задании указано, что при n == 0 функция должна возвращать пустой список.

Затем функция проверяет, меньше ли n трех. Если это так, то возвращается соответствующее количество элементов из начальной сигнатуры signature с помощью среза signature[:n].

Если n больше или равно 3, то создается копия списка signature и сохраняется в переменную tribonacci_sequence, которая будет содержать сгенерированную Tribonacci последовательность.

Далее, используя цикл while, функция генерирует последовательность до тех пор, пока длина списка tribonacci_sequence не станет равной n. Внутри цикла происходит суммирование последних трех чисел в списке tribonacci_sequence с помощью среза tribonacci_sequence[-3:], и результат добавляется в конец списка tribonacci_sequence.

После завершения цикла while функция возвращает сгенерированную Tribonacci последовательность в виде списка.
"""

# tags: Number Theory, Arrays, Lists, Fundamentals
# kyu: 6

def tribonacci(signature, n):
    """
    Функция, которая генерирует Tribonacci последовательность.

    Аргументы:
    - signature: список из 3-х чисел, начальная сигнатура Tribonacci последовательности
    - n: целое число, количество элементов, которые нужно сгенерировать

    Возвращает:
    - Список, содержащий первые n элементов Tribonacci последовательности
    """
    # Если n == 0, возвращаем пустой список
    if n == 0:
        return []

    # Если n меньше 3, возвращаем соответствующий элемент из сигнатуры
    if n < 3:
        return signature[:n]

    # Создаем копию сигнатуры
    tribonacci_sequence = signature[:]

    # Генерируем Tribonacci последовательность
    while len(tribonacci_sequence) < n:
        next_number = sum(tribonacci_sequence[-3:])
        tribonacci_sequence.append(next_number)

    return tribonacci_sequence
