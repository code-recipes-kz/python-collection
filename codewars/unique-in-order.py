"""
Функция unique_in_order принимает входной аргумент iterable, который представляет собой последовательность элементов, и возвращает список элементов без повторений, сохраняя исходный порядок элементов. Алгоритм реализации основан на простом сравнении каждого элемента с предыдущим элементом и добавлении его в результирующий список, если он отличается от предыдущего. Если входной аргумент пуст, то функция возвращает пустой список. Функция может работать с различными типами входных данных, такими как строки, списки или кортежи.

Функция unique_in_order принимает входной аргумент iterable, который представляет собой последовательность элементов.
В первой строке функции происходит проверка на пустоту входного аргумента с помощью условного оператора if not iterable:. Если iterable пуст (или равен None), то функция возвращает пустой список [], так как нет элементов для обработки и создания уникального списка.
Если iterable не пуст, то создается пустой список unique_list, который будет содержать уникальные элементы.
Далее, с помощью цикла for проходим по элементам iterable начиная с индекса 1 (индексация в Python начинается с 0).
Внутри цикла происходит сравнение текущего элемента iterable[i] с предыдущим элементом iterable[i-1] с помощью условия iterable[i] != iterable[i-1].
Если текущий элемент отличается от предыдущего, то он добавляется в список unique_list с помощью метода append().
После прохождения цикла, функция возвращает список unique_list, содержащий уникальные элементы из iterable в порядке их появления.
Функция может обрабатывать различные типы входных данных, такие как строки, списки или кортежи, так как она использует только операции сравнения и метод append(), которые применимы к различным типам данных в Python.
"""

# tags: Algorithms, Fundamentals
# kyu: 6

def unique_in_order(iterable):
    if not iterable:
        return []
    unique_list = [iterable[0]]
    for i in range(1, len(iterable)):
        if iterable[i] != iterable[i-1]:
            unique_list.append(iterable[i])
    return unique_list
