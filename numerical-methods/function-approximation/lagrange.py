# В этом примере x_values и y_values - это соответственно список значений x и y для аппроксимации, а
# x - точка, в которой нужно вычислить интерполяционный полином. Функция lagrange_interpolation вычисляет значение интерполяционного
# полинома Лагранжа в точке x на основе переданных значений x_values и y_values.
# Для вычисления значения интерполяционного полинома находятся произведения (x - x_j) / (x_i - x_j)
# для каждого j от 0 до n-1, где n - количество элементов в x_values, кроме i. Затем произведение умножается на соответствующее
# значение y_values[i] и суммируется с остальными слагаемыми.
# Пример использования этой функции выше показывает, как можно использовать ее для вычисления значения интерполяционного
# полинома в точке 0.5 для набора данных x_values и y_values.
# Да, конечно, давайте по шагам разберем, как работает код программы для аппроксимации функции с помощью интерполяционного полинома Лагранжа.
# 1. Создание функции lagrange_interpolation
# Эта строка определяет функцию lagrange_interpolation, которая принимает три аргумента:
# - x_values: список значений x, соответствующих значениям y;
# - y_values: список значений y, соответствующих значениям x;
# - x: точка, в которой нужно вычислить интерполяционный полином.
# 2. Инициализация переменных
# Переменная n равна длине списка x_values, а переменная result инициализируется нулем. result будет
# ранить значение интерполяционного полинома Лагранжа в точке x.
# 3. Вычисление интерполяционного полинома
# Этот код вычисляет интерполяционный полином Лагранжа в точке x на основе переданных значений x_values и y_values.
# Вложенные циклы for вычисляют произведения, которые представляются слагаемыми в формуле интерполяционного полинома Лагранжа.
# Внешний цикл for итерирует по индексам i списка y_values. На каждой итерации мы создаем переменную term, которая равна соответствующему значению y_values[i].
# Вложенный цикл for итерирует по индексам j списка x_values. Если i и j не равны, то мы умножаем term на (x - x_values[j]) / (x_values[i] - x_values[j]). Это выражение представляет собой слагаемое в формуле интерполяционного полинома Лагранжа, которое используется для вычисления значения полинома в точке x.
# Затем мы добавляем term к result на каждой итерации внешнего цикла for, чтобы накапливать значение интерполяционного полинома Лагранжа.
# Наконец, мы возвращаем значение result, которое является значением интерполяционного полинома Лагранжа в точке x.

def lagrange_interpolation(x_values, y_values, x):
    """
    Функция для решения аппроксимации функции с помощью интерполяционного полинома Лагранжа.

    Аргументы:
    x_values -- список значений x
    y_values -- список значений y, соответствующих значениям x
    x -- точка, в которой нужно вычислить интерполяционный полином

    Возвращает:
    значение интерполяционного полинома в точке x
    """

    n = len(x_values)
    result = 0

    for i in range(n):
        term = y_values[i]

        for j in range(n):
            if i != j:
                term *= (x - x_values[j]) / (x_values[i] - x_values[j])

        result += term

    return result

# Пример использования
x_values = [1, 2, 3]
y_values = [2,  7, 11]

print(lagrange_interpolation(x_values, y_values, 1))