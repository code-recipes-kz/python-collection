"""
Квадратичное аппроксимирование таблично заданной функции является задачей оптимизации, которая может быть решена с помощью метода наименьших квадратов. Для этого нужно найти квадратичную функцию, которая наилучшим образом приближает исходную функцию.

Для начала, давайте определимся с тем, как мы будем представлять нашу таблично заданную функцию. Для этого мы будем использовать два списка: список значений x и список соответствующих им значений y.

Вот как будет выглядеть программа для точечного квадратичного аппроксимирования:

Давайте посмотрим, как работает эта программа:

Создаем матрицу A для нашей системы уравнений, используя списки x и y. В матрице A у нас будет три столбца: $x^2$, $x$, и $1$.
Используем функцию numpy.linalg.lstsq() для решения системы уравнений. Эта функция возвращает вектор коэффициентов наименьших квадратов для нашей квадратичной функции вида $ax^2 + bx + c$.
Возвращаем функцию, которая вычисляет значение квадратичной функции для заданного значения x.
Вот как можно использовать эту функцию для аппроксимации некоторой таблично заданной функции:

Здесь мы генерируем некоторую таблично заданную функцию, а затем аппроксимируем ее с помощью нашей функции quadratic_approximation().

Построение графика функции в написанном мной коде происходит с помощью библиотеки matplotlib. Библиотека matplotlib позволяет строить графики различных функций и данных в Python.

В коде мы используем следующие методы и функции из библиотеки matplotlib для построения графика:

plt.plot(x, y, 'o', label='Data'): Этот метод строит график исходных данных (значений x и y) в виде точек с помощью символа o. Мы также добавляем метку 'Data' для легенды графика.
plt.plot(x, f(x), label='Quadratic approximation'): Этот метод строит график аппроксимации функции, используя значения x и вычисленные значения функции f(x). Мы также добавляем метку 'Quadratic approximation' для легенды графика.
plt.legend(): Эта функция добавляет легенду к графику, отображая метки, которые мы добавили в предыдущих методах.
Таким образом, мы строим два графика на одном рисунке: график исходных данных и график аппроксимации функции. Это позволяет сравнить результаты аппроксимации с исходными данными и оценить точность аппроксимации.
"""

import numpy as np
import matplotlib.pyplot as plt

def quadratic_approximation(x, y):
    # Создаем матрицу A для нашей системы уравнений
    A = np.vstack([x**2, x, np.ones(len(x))]).T
    # Вычисляем вектор коэффициентов
    a, b, c = np.linalg.lstsq(A, y, rcond=None)[0]
    # Возвращаем функцию вида ax^2 + bx + c
    return lambda x: a*x**2 + b*x + c

# Задаем нашу функцию
x = np.linspace(-5, 5, num=50)
y = x**2 + np.random.normal(0, 1, len(x))

# Аппроксимируем функцию
f = quadratic_approximation(x, y)

# Строим графики исходной функции и аппроксимации
plt.plot(x, y, 'o', label='Data')
plt.plot(x, f(x), label='Quadratic approximation')
plt.legend()
plt.show()