"""
В первой строке импортируются необходимые библиотеки: NumPy и scipy.integrate. NumPy используется для создания массивов чисел, а scipy.integrate содержит метод quad для вычисления определенного интеграла.

Далее определяется функция midpoint_rule, которая вычисляет приближенное значение определенного интеграла функции на отрезке [a, b] с использованием метода центральных прямоугольников с n интервалами. Входными параметрами функции являются функция, которую нужно проинтегрировать f, начало и конец отрезка a и b, а также количество интервалов n, на которые нужно разбить отрезок [a, b] для вычисления интеграла.

Внутри функции сначала определяется длина интервала delta_x, на которые нужно разбить отрезок [a, b] для вычисления интеграла. Затем с помощью функции np.linspace создаётся массив x, состоящий из середин интервалов, на которые разбит отрезок [a, b]. Для этого используется формула (a + delta_x / 2, b - delta_x / 2, n). Здесь a + delta_x / 2 - начало первого интервала, b - delta_x / 2 - конец последнего интервала, n - количество интервалов.

Затем с помощью функции f(x) вычисляются значения функции f в серединах интервалов, то есть y = f(x).

Приближенное значение интеграла вычисляется с помощью формулы integral = np.sum(y * delta_x) - суммы площадей прямоугольников, ограниченных значениями функции y и шириной интервала delta_x.

Погрешность вычисления интеграла определяется с помощью формулы error = np.abs(integral - spi.quad(f, a, b)[0]). Здесь используется встроенная функция quad библиотеки scipy.integrate для точного вычисления значения интеграла на заданном отрезке. Разность между приближенным значением интеграла и точным значением интеграла на заданном отрезке вычисляется с помощью функции np.abs.

Функция midpoint_rule возвращает приближенное значение определенного интеграла и погрешность
"""

import numpy as np
import scipy.integrate as spi

def midpoint_rule(f, a, b, n):
    """
    Вычисляет приближенное значение определенного интеграла функции на отрезке [a, b]
    с использованием метода центральных прямоугольников с n интервалами.

    f: функция, которую нужно проинтегрировать
    a: начало отрезка
    b: конец отрезка
    n: количество интервалов

    Возвращает приближенное значение определенного интеграла и погрешность.
    """
    delta_x = (b - a) / n  # длина интервала
    x = np.linspace(a + delta_x / 2, b - delta_x / 2, n)  # середины интервалов
    y = f(x)  # значения функции в серединах интервалов
    integral = np.sum(y * delta_x)  # приближенное значение интеграла
    error = np.abs(integral - spi.quad(f, a, b)[0])  # погрешность
    return integral, error

# Пример использования функции
f = lambda x: x  # функция, которую нужно проинтегрировать
a = 0.5  # начало отрезка
b = 1  # конец отрезка
n = 5  # количество интервалов
integral, error = midpoint_rule(f, a, b, n)

print("Приближенное значение интеграла:", integral)
print("Погрешность:", error)
