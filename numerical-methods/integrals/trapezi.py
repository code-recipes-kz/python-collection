"""
Сначала мы определяем функцию, которую необходимо проинтегрировать, с помощью следующего кода:

В этом случае мы используем функцию x ** 2, но вы можете изменить эту функцию на любую другую функцию, которую необходимо проинтегрировать.

Затем мы определяем функцию trapezoidal_rule, которая реализует метод трапеций. Вот как это выглядит:

Эта функция принимает четыре аргумента:

f: функция, которую необходимо проинтегрировать
a: нижний предел интегрирования
b: верхний предел интегрирования
n: количество трапеций

В первой строке функции мы вычисляем шаг h, который определяется как разность верхнего и нижнего пределов интегрирования, деленная на количество трапеций. Затем мы вычисляем значение суммы sum по формуле метода трапеций:

Здесь мы вычисляем значение функции в точках a и b, умножаем каждое значение на 0,5, а затем складываем их, чтобы получить начальное значение суммы.

Затем мы используем цикл for, чтобы пройти через все трапеции и вычислить значения функции в центре каждой трапеции. Для этого мы используем следующий код:

Здесь мы используем переменную i, чтобы пройти через все трапеции, и вычисляем значение аргумента x для каждой трапеции. Затем мы вычисляем значение функции в этой точке и добавляем его к текущему значению суммы.

Наконец, мы вычисляем значение интеграла, умножая шаг h на сумму sum, как показано здесь:
"""

def f(x):
    # функция, которую необходимо проинтегрировать
    return x

def trapezoidal_rule(f, a, b, n):
    # метод трапеций
    h = (b - a) / n
    sum = 0.5 * (f(a) + f(b))
    for i in range(1, n):
        x = a + i * h
        sum += f(x)
    return h * sum

a = 0.5  # нижний предел интегрирования
b = 1  # верхний предел интегрирования
n = 5  # количество трапеций

integral = trapezoidal_rule(f, a, b, n)

print("Интеграл методом трапеций:", integral)
